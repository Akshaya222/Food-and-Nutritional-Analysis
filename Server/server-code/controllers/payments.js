const {Stripe} = require('stripe');
const {v4} = require('uuid');
const Payment=require('../models/payment');
const Pricing=require("../models/pricing-plans");
const User=require("../models/userModel");
const { successHandler, failureHandler } = require("../utils/responseHandler");
 
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY,  {
    apiVersion: '2020-08-27',
  })

module.exports.addPayment=async(req, res, next) => {
    const { email,product , authToken,userID,pricingPlanID } = req.body;
    const { token } = authToken;
    const { card } = token;

    console.log(card);
    console.log("============================================== payment initiate =======================")
    const userProduct = product;

    // unique ID generated by client
     const idempotencyKey = v4()

     try {
         const customer = await stripe.customers.create({
             email: email,
             source: token.id
         })

         console.log('Customer Created.....')
         console.log(customer)
         
         const response = await stripe.charges.create({
             amount: userProduct.amount * 100,
             currency: 'INR',
             customer: customer.id,
             receipt_email: email,
             description: userProduct.description,
             shipping: {
                 name: card.name,
                 address: {
                     line1: "Hyderabad",
                     country: card.address_country,
                  }
             }
     
         },{ idempotencyKey: idempotencyKey})
         console.log("charge response")
         console.log(response,"idIs",response.id,"sourceis",response.source,"amountis",response.amount)
         const newPayment=await Payment.create({
             userID,
             pricingPlanID,
             amount:response.amount/100,
             paymenID:response.id,
             paymentMethodID:response.source.id,
             paymentMethod:`${response.source.brand} ${response.source.funding} ${response.source.object} ending with ${response.source.last4}` ,
             cusID:response.source.customer,
             date:new Date()
         })
        res.json({...newPayment,paid:response.paid})
     } catch (err) {
        console.log("=========================================== error ==========================")
        console.log(err)
        res.json(err)
     } 
}

module.exports.fetchPayment=async(req,res)=>{
     const userID=req.query.userID;
     let error;
     try{
       if(!userID){
        error=new Error("User Id is required");
        error.statusCode=400;
        throw error;
       }
       let user=await User.findById(userID);
       if(!user){
        error=new Error("User not found");
        error.statusCode=404;
        throw error;
       }
       let payment=await Payment.findOne({userID});
       if(!payment){
          successHandler(res,{},"fetched successfully");
       }
       else{
          let pricingPlan=await Pricing.findById(payment.pricingPlanID);
          console.log(pricingPlan)
          let data={
              pricingPlan,
              payment
          }
          successHandler(res,data,"fetched successfully");
       }
     }
     catch(e){
        failureHandler(res,e.message,e.statusCode)
     }  
}
